CCS PCM C Compiler, Version 5.015, 5967               11-Aug-20 07:39

               Filename:   G:\VDK-TrongTan\2.4\2.4.lst

               ROM used:   220 words (3%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           15 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B5
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  03
0009:  RETLW  9F
000A:  RETLW  25
000B:  RETLW  0D
000C:  RETLW  99
000D:  RETLW  49
000E:  RETLW  41
000F:  RETLW  1F
0010:  RETLW  01
0011:  RETLW  09
0012:  MOVF   28,W
0013:  CLRF   78
0014:  SUBWF  27,W
0015:  BTFSC  03.0
0016:  GOTO   01A
0017:  MOVF   27,W
0018:  MOVWF  77
0019:  GOTO   026
001A:  CLRF   77
001B:  MOVLW  08
001C:  MOVWF  29
001D:  RLF    27,F
001E:  RLF    77,F
001F:  MOVF   28,W
0020:  SUBWF  77,W
0021:  BTFSC  03.0
0022:  MOVWF  77
0023:  RLF    78,F
0024:  DECFSZ 29,F
0025:  GOTO   01D
0026:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP 
.................... #use delay(clock=8M) 
0027:  MOVLW  26
0028:  MOVWF  04
0029:  BCF    03.7
002A:  MOVF   00,W
002B:  BTFSC  03.2
002C:  GOTO   03A
002D:  MOVLW  02
002E:  MOVWF  78
002F:  CLRF   77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   02F
0034:  MOVLW  97
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 00,F
0039:  GOTO   02D
003A:  RETURN
.................... #INT_TIMER0 
.................... int8 dv,chuc,tram,dem; 
.................... const int8 led[10]={0x03,0x9f,0x25,0x0d,0x99,0x49,0x41,0x1f,0x01,0x09}; 
.................... void qled() 
.................... { 
....................    dv=dem%10; 
003B:  MOVF   23,W
003C:  MOVWF  27
003D:  MOVLW  0A
003E:  MOVWF  28
003F:  CALL   012
0040:  MOVF   77,W
0041:  MOVWF  20
....................    chuc=dem%100/10; 
0042:  MOVF   23,W
0043:  MOVWF  27
0044:  MOVLW  64
0045:  MOVWF  28
0046:  CALL   012
0047:  MOVF   77,W
0048:  MOVWF  27
0049:  MOVLW  0A
004A:  MOVWF  28
004B:  CALL   012
004C:  MOVF   78,W
004D:  MOVWF  21
....................    tram=dem/100; 
004E:  MOVF   23,W
004F:  MOVWF  27
0050:  MOVLW  64
0051:  MOVWF  28
0052:  CALL   012
0053:  MOVF   78,W
0054:  MOVWF  22
....................    output_low(pin_D0); 
0055:  BSF    03.5
0056:  BCF    08.0
0057:  BCF    03.5
0058:  BCF    08.0
....................    output_low(pin_D2); 
0059:  BSF    03.5
005A:  BCF    08.2
005B:  BCF    03.5
005C:  BCF    08.2
....................    output_high(pin_D1); 
005D:  BSF    03.5
005E:  BCF    08.1
005F:  BCF    03.5
0060:  BSF    08.1
....................    output_b(led[tram]); 
0061:  MOVF   22,W
0062:  CALL   004
0063:  MOVWF  26
0064:  BSF    03.5
0065:  CLRF   06
0066:  BCF    03.5
0067:  MOVF   26,W
0068:  MOVWF  06
....................    delay_ms(10); 
0069:  MOVLW  0A
006A:  MOVWF  26
006B:  CALL   027
....................    output_high(pin_D2); 
006C:  BSF    03.5
006D:  BCF    08.2
006E:  BCF    03.5
006F:  BSF    08.2
....................    output_high(pin_D0); 
0070:  BSF    03.5
0071:  BCF    08.0
0072:  BCF    03.5
0073:  BSF    08.0
....................     
....................    output_low(pin_D2); 
0074:  BSF    03.5
0075:  BCF    08.2
0076:  BCF    03.5
0077:  BCF    08.2
....................    output_low(pin_D1); 
0078:  BSF    03.5
0079:  BCF    08.1
007A:  BCF    03.5
007B:  BCF    08.1
....................    output_high(pin_D0); 
007C:  BSF    03.5
007D:  BCF    08.0
007E:  BCF    03.5
007F:  BSF    08.0
....................    output_b(led[chuc]); 
0080:  MOVF   21,W
0081:  CALL   004
0082:  MOVWF  26
0083:  BSF    03.5
0084:  CLRF   06
0085:  BCF    03.5
0086:  MOVF   26,W
0087:  MOVWF  06
....................    delay_ms(10); 
0088:  MOVLW  0A
0089:  MOVWF  26
008A:  CALL   027
....................    output_high(pin_D1); 
008B:  BSF    03.5
008C:  BCF    08.1
008D:  BCF    03.5
008E:  BSF    08.1
....................    output_high(pin_D2); 
008F:  BSF    03.5
0090:  BCF    08.2
0091:  BCF    03.5
0092:  BSF    08.2
....................     
....................    output_low(pin_D1); 
0093:  BSF    03.5
0094:  BCF    08.1
0095:  BCF    03.5
0096:  BCF    08.1
....................    output_low(pin_D0); 
0097:  BSF    03.5
0098:  BCF    08.0
0099:  BCF    03.5
009A:  BCF    08.0
....................    output_high(pin_D2); 
009B:  BSF    03.5
009C:  BCF    08.2
009D:  BCF    03.5
009E:  BSF    08.2
....................    output_b(led[dv]); 
009F:  MOVF   20,W
00A0:  CALL   004
00A1:  MOVWF  26
00A2:  BSF    03.5
00A3:  CLRF   06
00A4:  BCF    03.5
00A5:  MOVF   26,W
00A6:  MOVWF  06
....................    delay_ms(10); 
00A7:  MOVLW  0A
00A8:  MOVWF  26
00A9:  CALL   027
....................    output_high(pin_D0); 
00AA:  BSF    03.5
00AB:  BCF    08.0
00AC:  BCF    03.5
00AD:  BSF    08.0
....................    output_high(pin_D1); 
00AE:  BSF    03.5
00AF:  BCF    08.1
00B0:  BCF    03.5
00B1:  BSF    08.1
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   0D4 (RETURN)
.................... } 
.................... void main(void) 
00B5:  MOVF   03,W
00B6:  ANDLW  1F
00B7:  MOVWF  03
00B8:  BSF    03.5
00B9:  BSF    1F.0
00BA:  BSF    1F.1
00BB:  BSF    1F.2
00BC:  BCF    1F.3
00BD:  MOVLW  07
00BE:  MOVWF  1C
00BF:  BCF    03.7
.................... {  
.................... enable_interrupts(GLOBAL); 
00C0:  MOVLW  C0
00C1:  BCF    03.5
00C2:  IORWF  0B,F
.................... enable_interrupts(INT_TIMER0); 
00C3:  BSF    0B.5
.................... setup_timer_0(RTCC_DIV_64|RTCC_INTERNAL); 
00C4:  BSF    03.5
00C5:  MOVF   01,W
00C6:  ANDLW  C0
00C7:  IORLW  05
00C8:  MOVWF  01
.................... while(1) 
.................... { 
.................... for(int16 i=0;i<2;i++) 
00C9:  BCF    03.5
00CA:  CLRF   25
00CB:  CLRF   24
00CC:  MOVF   25,F
00CD:  BTFSS  03.2
00CE:  GOTO   0D8
00CF:  MOVF   24,W
00D0:  SUBLW  01
00D1:  BTFSS  03.0
00D2:  GOTO   0D8
.................... {qled();} 
00D3:  GOTO   03B
00D4:  INCF   24,F
00D5:  BTFSC  03.2
00D6:  INCF   25,F
00D7:  GOTO   0CC
.................... dem=dem+1; 
00D8:  MOVLW  01
00D9:  ADDWF  23,F
00DA:  GOTO   0CA
.................... } 
.................... } 
00DB:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

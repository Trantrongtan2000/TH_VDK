CCS PCM C Compiler, Version 5.015, 5967               11-Aug-20 08:20

               Filename:   G:\VDK-TrongTan\bai25\vd25.lst

               ROM used:   505 words (6%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18D
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA C4,27
0005:  DATA CE,23
0006:  DATA 20,24
0007:  DATA 4F,00
*
00EB:  MOVF   0B,W
00EC:  MOVWF  25
00ED:  BCF    0B.7
00EE:  BSF    03.5
00EF:  BSF    03.6
00F0:  BSF    0C.7
00F1:  BSF    0C.0
00F2:  NOP
00F3:  NOP
00F4:  BCF    03.5
00F5:  BCF    03.6
00F6:  BTFSC  25.7
00F7:  BSF    0B.7
00F8:  BSF    03.6
00F9:  MOVF   0C,W
00FA:  ANDLW  7F
00FB:  BTFSC  03.2
00FC:  GOTO   13F
00FD:  BCF    03.6
00FE:  MOVWF  25
00FF:  BSF    03.6
0100:  MOVF   0D,W
0101:  BCF    03.6
0102:  MOVWF  26
0103:  BSF    03.6
0104:  MOVF   0F,W
0105:  BCF    03.6
0106:  MOVWF  27
0107:  MOVF   25,W
0108:  MOVWF  28
0109:  CALL   0BF
010A:  MOVF   26,W
010B:  BSF    03.6
010C:  MOVWF  0D
010D:  BCF    03.6
010E:  MOVF   27,W
010F:  BSF    03.6
0110:  MOVWF  0F
0111:  BCF    03.6
0112:  MOVF   0B,W
0113:  MOVWF  28
0114:  BCF    0B.7
0115:  BSF    03.5
0116:  BSF    03.6
0117:  BSF    0C.7
0118:  BSF    0C.0
0119:  NOP
011A:  NOP
011B:  BCF    03.5
011C:  BCF    03.6
011D:  BTFSC  28.7
011E:  BSF    0B.7
011F:  BSF    03.6
0120:  RLF    0C,W
0121:  RLF    0E,W
0122:  ANDLW  7F
0123:  BTFSC  03.2
0124:  GOTO   13F
0125:  BCF    03.6
0126:  MOVWF  25
0127:  BSF    03.6
0128:  MOVF   0D,W
0129:  BCF    03.6
012A:  MOVWF  26
012B:  BSF    03.6
012C:  MOVF   0F,W
012D:  BCF    03.6
012E:  MOVWF  27
012F:  MOVF   25,W
0130:  MOVWF  28
0131:  CALL   0BF
0132:  MOVF   26,W
0133:  BSF    03.6
0134:  MOVWF  0D
0135:  BCF    03.6
0136:  MOVF   27,W
0137:  BSF    03.6
0138:  MOVWF  0F
0139:  INCF   0D,F
013A:  BTFSC  03.2
013B:  INCF   0F,F
013C:  BCF    03.6
013D:  GOTO   0EB
013E:  BSF    03.6
013F:  BCF    03.6
0140:  BCF    0A.3
0141:  BCF    0A.4
0142:  GOTO   1AC (RETURN)
0143:  MOVF   28,W
0144:  CLRF   78
0145:  SUBWF  27,W
0146:  BTFSC  03.0
0147:  GOTO   14B
0148:  MOVF   27,W
0149:  MOVWF  77
014A:  GOTO   157
014B:  CLRF   77
014C:  MOVLW  08
014D:  MOVWF  29
014E:  RLF    27,F
014F:  RLF    77,F
0150:  MOVF   28,W
0151:  SUBWF  77,W
0152:  BTFSC  03.0
0153:  MOVWF  77
0154:  RLF    78,F
0155:  DECFSZ 29,F
0156:  GOTO   14E
0157:  RETURN
0158:  MOVF   78,W
0159:  MOVF   25,W
015A:  MOVWF  27
015B:  MOVLW  64
015C:  MOVWF  28
015D:  CALL   143
015E:  MOVF   77,W
015F:  MOVWF  25
0160:  MOVF   78,W
0161:  MOVLW  30
0162:  BTFSS  03.2
0163:  GOTO   16B
0164:  BTFSS  26.1
0165:  GOTO   172
0166:  BTFSC  26.3
0167:  GOTO   172
0168:  BTFSC  26.4
0169:  MOVLW  20
016A:  GOTO   16E
016B:  BCF    26.3
016C:  BCF    26.4
016D:  BSF    26.0
016E:  ADDWF  78,F
016F:  MOVF   78,W
0170:  MOVWF  28
0171:  CALL   0BF
0172:  MOVF   25,W
0173:  MOVWF  27
0174:  MOVLW  0A
0175:  MOVWF  28
0176:  CALL   143
0177:  MOVF   77,W
0178:  MOVWF  25
0179:  MOVF   78,W
017A:  MOVLW  30
017B:  BTFSS  03.2
017C:  GOTO   183
017D:  BTFSC  26.3
017E:  GOTO   187
017F:  BTFSS  26.0
0180:  GOTO   187
0181:  BTFSC  26.4
0182:  MOVLW  20
0183:  ADDWF  78,F
0184:  MOVF   78,W
0185:  MOVWF  28
0186:  CALL   0BF
0187:  MOVLW  30
0188:  ADDWF  25,F
0189:  MOVF   25,W
018A:  MOVWF  28
018B:  CALL   0BF
018C:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP 
.................... #use delay(clock=8M) 
*
0008:  MOVLW  2A
0009:  MOVWF  04
000A:  BCF    03.7
000B:  MOVF   00,W
000C:  BTFSC  03.2
000D:  GOTO   01B
000E:  MOVLW  02
000F:  MOVWF  78
0010:  CLRF   77
0011:  DECFSZ 77,F
0012:  GOTO   011
0013:  DECFSZ 78,F
0014:  GOTO   010
0015:  MOVLW  97
0016:  MOVWF  77
0017:  DECFSZ 77,F
0018:  GOTO   017
0019:  DECFSZ 00,F
001A:  GOTO   00E
001B:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0035:  MOVLW  0F
0036:  BSF    03.5
0037:  ANDWF  08,W
0038:  IORLW  F0
0039:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003A:  BCF    03.5
003B:  BSF    08.2
....................    delay_cycles(1); 
003C:  NOP
....................    lcd_output_enable(1); 
003D:  BSF    08.0
....................    delay_cycles(1); 
003E:  NOP
....................    high = lcd_read_nibble(); 
003F:  CALL   029
0040:  MOVF   78,W
0041:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
0042:  BCF    08.0
....................    delay_cycles(1); 
0043:  NOP
....................    lcd_output_enable(1); 
0044:  BSF    08.0
....................    delay_us(1); 
0045:  GOTO   046
....................    low = lcd_read_nibble(); 
0046:  CALL   029
0047:  MOVF   78,W
0048:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0049:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004A:  MOVLW  0F
004B:  BSF    03.5
004C:  ANDWF  08,W
004D:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
004E:  BCF    03.5
004F:  SWAPF  30,W
0050:  MOVWF  77
0051:  MOVLW  F0
0052:  ANDWF  77,F
0053:  MOVF   77,W
0054:  IORWF  2F,W
0055:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0029:  MOVF   08,W
002A:  MOVWF  77
002B:  SWAPF  08,W
002C:  ANDLW  0F
002D:  MOVWF  78
....................   #endif 
002E:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
001C:  SWAPF  30,W
001D:  ANDLW  F0
001E:  MOVWF  77
001F:  MOVLW  0F
0020:  ANDWF  08,W
0021:  IORWF  77,W
0022:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0023:  NOP
....................    lcd_output_enable(1); 
0024:  BSF    08.0
....................    delay_us(2); 
0025:  GOTO   026
0026:  GOTO   027
....................    lcd_output_enable(0); 
0027:  BCF    08.0
0028:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
002F:  BSF    03.5
0030:  BCF    08.0
....................    lcd_rs_tris(); 
0031:  BCF    08.1
....................    lcd_rw_tris(); 
0032:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0033:  BCF    03.5
0034:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0056:  MOVF   78,W
0057:  MOVWF  2F
0058:  BTFSC  2F.7
0059:  GOTO   035
....................    lcd_output_rs(address); 
005A:  BTFSS  2D.0
005B:  BCF    08.1
005C:  BTFSC  2D.0
005D:  BSF    08.1
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_rw(0); 
005F:  BCF    08.2
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_enable(0); 
0061:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0062:  SWAPF  2E,W
0063:  MOVWF  2F
0064:  MOVLW  0F
0065:  ANDWF  2F,F
0066:  MOVF   2F,W
0067:  MOVWF  30
0068:  CALL   01C
....................    lcd_send_nibble(n & 0xf); 
0069:  MOVF   2E,W
006A:  ANDLW  0F
006B:  MOVWF  2F
006C:  MOVWF  30
006D:  CALL   01C
006E:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
006F:  MOVLW  28
0070:  MOVWF  26
0071:  MOVLW  0C
0072:  MOVWF  27
0073:  MOVLW  01
0074:  MOVWF  28
0075:  MOVLW  06
0076:  MOVWF  29
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0077:  BCF    08.0
....................    lcd_output_rs(0); 
0078:  BCF    08.1
....................    lcd_output_rw(0); 
0079:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007A:  MOVLW  0F
007B:  BSF    03.5
007C:  ANDWF  08,W
007D:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
007E:  BCF    08.0
....................    lcd_rs_tris(); 
007F:  BCF    08.1
....................    lcd_rw_tris(); 
0080:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0081:  MOVLW  0F
0082:  BCF    03.5
0083:  MOVWF  2A
0084:  CALL   008
....................    for(i=1;i<=3;++i) 
0085:  MOVLW  01
0086:  MOVWF  25
0087:  MOVF   25,W
0088:  SUBLW  03
0089:  BTFSS  03.0
008A:  GOTO   093
....................    { 
....................        lcd_send_nibble(3); 
008B:  MOVLW  03
008C:  MOVWF  30
008D:  CALL   01C
....................        delay_ms(5); 
008E:  MOVLW  05
008F:  MOVWF  2A
0090:  CALL   008
0091:  INCF   25,F
0092:  GOTO   087
....................    } 
....................     
....................    lcd_send_nibble(2); 
0093:  MOVLW  02
0094:  MOVWF  30
0095:  CALL   01C
....................    delay_ms(5); 
0096:  MOVLW  05
0097:  MOVWF  2A
0098:  CALL   008
....................    for(i=0;i<=3;++i) 
0099:  CLRF   25
009A:  MOVF   25,W
009B:  SUBLW  03
009C:  BTFSS  03.0
009D:  GOTO   0AA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
009E:  MOVLW  26
009F:  ADDWF  25,W
00A0:  MOVWF  04
00A1:  BCF    03.7
00A2:  MOVF   00,W
00A3:  MOVWF  2A
00A4:  CLRF   2D
00A5:  MOVF   2A,W
00A6:  MOVWF  2E
00A7:  CALL   02F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A8:  INCF   25,F
00A9:  GOTO   09A
00AA:  BCF    0A.3
00AB:  BCF    0A.4
00AC:  GOTO   1A0 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00AD:  DECFSZ 2A,W
00AE:  GOTO   0B0
00AF:  GOTO   0B3
....................       address=LCD_LINE_TWO; 
00B0:  MOVLW  40
00B1:  MOVWF  2B
00B2:  GOTO   0B4
....................    else 
....................       address=0; 
00B3:  CLRF   2B
....................       
....................    address+=x-1; 
00B4:  MOVLW  01
00B5:  SUBWF  29,W
00B6:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
00B7:  MOVF   2B,W
00B8:  IORLW  80
00B9:  MOVWF  2C
00BA:  CLRF   2D
00BB:  MOVF   2C,W
00BC:  MOVWF  2E
00BD:  CALL   02F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BE:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00BF:  MOVF   28,W
00C0:  XORLW  07
00C1:  BTFSC  03.2
00C2:  GOTO   0CD
00C3:  XORLW  0B
00C4:  BTFSC  03.2
00C5:  GOTO   0D2
00C6:  XORLW  06
00C7:  BTFSC  03.2
00C8:  GOTO   0DA
00C9:  XORLW  02
00CA:  BTFSC  03.2
00CB:  GOTO   0E0
00CC:  GOTO   0E5
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00CD:  MOVLW  01
00CE:  MOVWF  29
00CF:  MOVWF  2A
00D0:  CALL   0AD
00D1:  GOTO   0EA
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D2:  CLRF   2D
00D3:  MOVLW  01
00D4:  MOVWF  2E
00D5:  CALL   02F
....................                      delay_ms(2); 
00D6:  MOVLW  02
00D7:  MOVWF  2A
00D8:  CALL   008
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00D9:  GOTO   0EA
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DA:  MOVLW  01
00DB:  MOVWF  29
00DC:  MOVLW  02
00DD:  MOVWF  2A
00DE:  CALL   0AD
00DF:  GOTO   0EA
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E0:  CLRF   2D
00E1:  MOVLW  10
00E2:  MOVWF  2E
00E3:  CALL   02F
00E4:  GOTO   0EA
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E5:  MOVLW  01
00E6:  MOVWF  2D
00E7:  MOVF   28,W
00E8:  MOVWF  2E
00E9:  CALL   02F
....................      #endif 
....................    } 
00EA:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define SW1 PIN_C3 
.................... #define SW2 PIN_C4 
.................... void main(void) 
*
018D:  MOVF   03,W
018E:  ANDLW  1F
018F:  MOVWF  03
0190:  MOVLW  FF
0191:  MOVWF  20
0192:  BSF    03.5
0193:  BSF    1F.0
0194:  BSF    1F.1
0195:  BSF    1F.2
0196:  BCF    1F.3
0197:  MOVLW  07
0198:  MOVWF  1C
0199:  BCF    03.7
019A:  BCF    03.5
019B:  CLRF   21
019C:  CLRF   22
019D:  CLRF   23
019E:  CLRF   24
.................... {  
.................... int8 SW=0;                                
.................... int8 phut=0; 
.................... int8 gio=0; 
.................... int8 giay=0; 
.................... lcd_init(); 
019F:  GOTO   06F
.................... lcd_gotoxy(4,1); 
01A0:  MOVLW  04
01A1:  MOVWF  29
01A2:  MOVLW  01
01A3:  MOVWF  2A
01A4:  CALL   0AD
.................... printf(lcd_putc,"DONG HO"); 
01A5:  MOVLW  04
01A6:  BSF    03.6
01A7:  MOVWF  0D
01A8:  MOVLW  00
01A9:  MOVWF  0F
01AA:  BCF    03.6
01AB:  GOTO   0EB
.................... while (TRUE) 
.................... {  
....................    if(!input(SW1)) {if(gio<=23){gio++;}else{gio=0;}} 
01AC:  BSF    20.3
01AD:  MOVF   20,W
01AE:  BSF    03.5
01AF:  MOVWF  07
01B0:  BCF    03.5
01B1:  BTFSC  07.3
01B2:  GOTO   1BA
01B3:  MOVF   23,W
01B4:  SUBLW  17
01B5:  BTFSS  03.0
01B6:  GOTO   1B9
01B7:  INCF   23,F
01B8:  GOTO   1BA
01B9:  CLRF   23
....................    if(!input(SW2)) {if(phut>=59){gio++;phut=0;}else{phut++;}} 
01BA:  BSF    20.4
01BB:  MOVF   20,W
01BC:  BSF    03.5
01BD:  MOVWF  07
01BE:  BCF    03.5
01BF:  BTFSC  07.4
01C0:  GOTO   1C9
01C1:  MOVF   22,W
01C2:  SUBLW  3A
01C3:  BTFSC  03.0
01C4:  GOTO   1C8
01C5:  INCF   23,F
01C6:  CLRF   22
01C7:  GOTO   1C9
01C8:  INCF   22,F
....................    delay_ms(100);giay++; 
01C9:  MOVLW  64
01CA:  MOVWF  2A
01CB:  CALL   008
01CC:  INCF   24,F
....................    if(giay==600){giay=0;phut++;} 
01CD:  MOVF   24,W
01CE:  SUBLW  58
01CF:  BTFSS  03.2
01D0:  GOTO   1D3
01D1:  CLRF   24
01D2:  INCF   22,F
....................    if(phut==60){phut=0;gio++;} 
01D3:  MOVF   22,W
01D4:  SUBLW  3C
01D5:  BTFSS  03.2
01D6:  GOTO   1D9
01D7:  CLRF   22
01D8:  INCF   23,F
....................    if(gio==24){gio=0;} 
01D9:  MOVF   23,W
01DA:  SUBLW  18
01DB:  BTFSC  03.2
01DC:  CLRF   23
....................    lcd_gotoxy(4,2); 
01DD:  MOVLW  04
01DE:  MOVWF  29
01DF:  MOVLW  02
01E0:  MOVWF  2A
01E1:  CALL   0AD
....................    printf(lcd_putc,"%02u:%02u:%02u",gio,phut,giay); 
01E2:  MOVF   23,W
01E3:  MOVWF  25
01E4:  MOVLW  01
01E5:  MOVWF  26
01E6:  CALL   158
01E7:  MOVLW  3A
01E8:  MOVWF  28
01E9:  CALL   0BF
01EA:  MOVF   22,W
01EB:  MOVWF  25
01EC:  MOVLW  01
01ED:  MOVWF  26
01EE:  CALL   158
01EF:  MOVLW  3A
01F0:  MOVWF  28
01F1:  CALL   0BF
01F2:  MOVF   24,W
01F3:  MOVWF  25
01F4:  MOVLW  01
01F5:  MOVWF  26
01F6:  CALL   158
01F7:  GOTO   1AC
.................... } 
.................... } 
01F8:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

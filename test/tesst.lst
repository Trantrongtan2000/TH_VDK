CCS PCM C Compiler, Version 5.015, 5967               28-Jul-20 08:24

               Filename:   E:\VDK-TrongTan\test\tesst.lst

               ROM used:   414 words (5%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           20 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   14A
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA D8,34
0005:  DATA 6E,10
0006:  DATA 63,34
0007:  DATA E1,37
0008:  DATA A0,31
0009:  DATA E1,31
000A:  DATA 20,31
000B:  DATA 61,37
000C:  DATA 21,00
000D:  DATA C8,2A
000E:  DATA D4,22
000F:  DATA 43,24
0010:  DATA 00,00
*
00F4:  MOVF   0B,W
00F5:  MOVWF  22
00F6:  BCF    0B.7
00F7:  BSF    03.5
00F8:  BSF    03.6
00F9:  BSF    0C.7
00FA:  BSF    0C.0
00FB:  NOP
00FC:  NOP
00FD:  BCF    03.5
00FE:  BCF    03.6
00FF:  BTFSC  22.7
0100:  BSF    0B.7
0101:  BSF    03.6
0102:  MOVF   0C,W
0103:  ANDLW  7F
0104:  BTFSC  03.2
0105:  GOTO   148
0106:  BCF    03.6
0107:  MOVWF  22
0108:  BSF    03.6
0109:  MOVF   0D,W
010A:  BCF    03.6
010B:  MOVWF  23
010C:  BSF    03.6
010D:  MOVF   0F,W
010E:  BCF    03.6
010F:  MOVWF  24
0110:  MOVF   22,W
0111:  MOVWF  25
0112:  CALL   0C8
0113:  MOVF   23,W
0114:  BSF    03.6
0115:  MOVWF  0D
0116:  BCF    03.6
0117:  MOVF   24,W
0118:  BSF    03.6
0119:  MOVWF  0F
011A:  BCF    03.6
011B:  MOVF   0B,W
011C:  MOVWF  25
011D:  BCF    0B.7
011E:  BSF    03.5
011F:  BSF    03.6
0120:  BSF    0C.7
0121:  BSF    0C.0
0122:  NOP
0123:  NOP
0124:  BCF    03.5
0125:  BCF    03.6
0126:  BTFSC  25.7
0127:  BSF    0B.7
0128:  BSF    03.6
0129:  RLF    0C,W
012A:  RLF    0E,W
012B:  ANDLW  7F
012C:  BTFSC  03.2
012D:  GOTO   148
012E:  BCF    03.6
012F:  MOVWF  22
0130:  BSF    03.6
0131:  MOVF   0D,W
0132:  BCF    03.6
0133:  MOVWF  23
0134:  BSF    03.6
0135:  MOVF   0F,W
0136:  BCF    03.6
0137:  MOVWF  24
0138:  MOVF   22,W
0139:  MOVWF  25
013A:  CALL   0C8
013B:  MOVF   23,W
013C:  BSF    03.6
013D:  MOVWF  0D
013E:  BCF    03.6
013F:  MOVF   24,W
0140:  BSF    03.6
0141:  MOVWF  0F
0142:  INCF   0D,F
0143:  BTFSC  03.2
0144:  INCF   0F,F
0145:  BCF    03.6
0146:  GOTO   0F4
0147:  BSF    03.6
0148:  BCF    03.6
0149:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP 
.................... #use delay(clock=8M) 
*
0011:  MOVLW  27
0012:  MOVWF  04
0013:  BCF    03.7
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   024
0017:  MOVLW  02
0018:  MOVWF  78
0019:  CLRF   77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 78,F
001D:  GOTO   019
001E:  MOVLW  97
001F:  MOVWF  77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 00,F
0023:  GOTO   017
0024:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003E:  MOVLW  0F
003F:  BSF    03.5
0040:  ANDWF  08,W
0041:  IORLW  F0
0042:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0043:  BCF    03.5
0044:  BSF    08.2
....................    delay_cycles(1); 
0045:  NOP
....................    lcd_output_enable(1); 
0046:  BSF    08.0
....................    delay_cycles(1); 
0047:  NOP
....................    high = lcd_read_nibble(); 
0048:  CALL   032
0049:  MOVF   78,W
004A:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
004B:  BCF    08.0
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    08.0
....................    delay_us(1); 
004E:  GOTO   04F
....................    low = lcd_read_nibble(); 
004F:  CALL   032
0050:  MOVF   78,W
0051:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
0052:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0053:  MOVLW  0F
0054:  BSF    03.5
0055:  ANDWF  08,W
0056:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0057:  BCF    03.5
0058:  SWAPF  2D,W
0059:  MOVWF  77
005A:  MOVLW  F0
005B:  ANDWF  77,F
005C:  MOVF   77,W
005D:  IORWF  2C,W
005E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0032:  MOVF   08,W
0033:  MOVWF  77
0034:  SWAPF  08,W
0035:  ANDLW  0F
0036:  MOVWF  78
....................   #endif 
0037:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0025:  SWAPF  2D,W
0026:  ANDLW  F0
0027:  MOVWF  77
0028:  MOVLW  0F
0029:  ANDWF  08,W
002A:  IORWF  77,W
002B:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
002C:  NOP
....................    lcd_output_enable(1); 
002D:  BSF    08.0
....................    delay_us(2); 
002E:  GOTO   02F
002F:  GOTO   030
....................    lcd_output_enable(0); 
0030:  BCF    08.0
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0038:  BSF    03.5
0039:  BCF    08.0
....................    lcd_rs_tris(); 
003A:  BCF    08.1
....................    lcd_rw_tris(); 
003B:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003C:  BCF    03.5
003D:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005F:  MOVF   78,W
0060:  MOVWF  2C
0061:  BTFSC  2C.7
0062:  GOTO   03E
....................    lcd_output_rs(address); 
0063:  BTFSS  2A.0
0064:  BCF    08.1
0065:  BTFSC  2A.0
0066:  BSF    08.1
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_rw(0); 
0068:  BCF    08.2
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_enable(0); 
006A:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006B:  SWAPF  2B,W
006C:  MOVWF  2C
006D:  MOVLW  0F
006E:  ANDWF  2C,F
006F:  MOVF   2C,W
0070:  MOVWF  2D
0071:  CALL   025
....................    lcd_send_nibble(n & 0xf); 
0072:  MOVF   2B,W
0073:  ANDLW  0F
0074:  MOVWF  2C
0075:  MOVWF  2D
0076:  CALL   025
0077:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0078:  MOVLW  28
0079:  MOVWF  23
007A:  MOVLW  0C
007B:  MOVWF  24
007C:  MOVLW  01
007D:  MOVWF  25
007E:  MOVLW  06
007F:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0080:  BCF    08.0
....................    lcd_output_rs(0); 
0081:  BCF    08.1
....................    lcd_output_rw(0); 
0082:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0083:  MOVLW  0F
0084:  BSF    03.5
0085:  ANDWF  08,W
0086:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0087:  BCF    08.0
....................    lcd_rs_tris(); 
0088:  BCF    08.1
....................    lcd_rw_tris(); 
0089:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
008A:  MOVLW  0F
008B:  BCF    03.5
008C:  MOVWF  27
008D:  CALL   011
....................    for(i=1;i<=3;++i) 
008E:  MOVLW  01
008F:  MOVWF  22
0090:  MOVF   22,W
0091:  SUBLW  03
0092:  BTFSS  03.0
0093:  GOTO   09C
....................    { 
....................        lcd_send_nibble(3); 
0094:  MOVLW  03
0095:  MOVWF  2D
0096:  CALL   025
....................        delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  27
0099:  CALL   011
009A:  INCF   22,F
009B:  GOTO   090
....................    } 
....................     
....................    lcd_send_nibble(2); 
009C:  MOVLW  02
009D:  MOVWF  2D
009E:  CALL   025
....................    delay_ms(5); 
009F:  MOVLW  05
00A0:  MOVWF  27
00A1:  CALL   011
....................    for(i=0;i<=3;++i) 
00A2:  CLRF   22
00A3:  MOVF   22,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0B3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A7:  MOVLW  23
00A8:  ADDWF  22,W
00A9:  MOVWF  04
00AA:  BCF    03.7
00AB:  MOVF   00,W
00AC:  MOVWF  27
00AD:  CLRF   2A
00AE:  MOVF   27,W
00AF:  MOVWF  2B
00B0:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B1:  INCF   22,F
00B2:  GOTO   0A3
00B3:  BCF    0A.3
00B4:  BCF    0A.4
00B5:  GOTO   15A (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B6:  DECFSZ 27,W
00B7:  GOTO   0B9
00B8:  GOTO   0BC
....................       address=LCD_LINE_TWO; 
00B9:  MOVLW  40
00BA:  MOVWF  28
00BB:  GOTO   0BD
....................    else 
....................       address=0; 
00BC:  CLRF   28
....................       
....................    address+=x-1; 
00BD:  MOVLW  01
00BE:  SUBWF  26,W
00BF:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address); 
00C0:  MOVF   28,W
00C1:  IORLW  80
00C2:  MOVWF  29
00C3:  CLRF   2A
00C4:  MOVF   29,W
00C5:  MOVWF  2B
00C6:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C7:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C8:  MOVF   25,W
00C9:  XORLW  07
00CA:  BTFSC  03.2
00CB:  GOTO   0D6
00CC:  XORLW  0B
00CD:  BTFSC  03.2
00CE:  GOTO   0DB
00CF:  XORLW  06
00D0:  BTFSC  03.2
00D1:  GOTO   0E3
00D2:  XORLW  02
00D3:  BTFSC  03.2
00D4:  GOTO   0E9
00D5:  GOTO   0EE
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D6:  MOVLW  01
00D7:  MOVWF  26
00D8:  MOVWF  27
00D9:  CALL   0B6
00DA:  GOTO   0F3
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DB:  CLRF   2A
00DC:  MOVLW  01
00DD:  MOVWF  2B
00DE:  CALL   038
....................                      delay_ms(2); 
00DF:  MOVLW  02
00E0:  MOVWF  27
00E1:  CALL   011
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E2:  GOTO   0F3
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E3:  MOVLW  01
00E4:  MOVWF  26
00E5:  MOVLW  02
00E6:  MOVWF  27
00E7:  CALL   0B6
00E8:  GOTO   0F3
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E9:  CLRF   2A
00EA:  MOVLW  10
00EB:  MOVWF  2B
00EC:  CALL   038
00ED:  GOTO   0F3
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00EE:  MOVLW  01
00EF:  MOVWF  2A
00F0:  MOVF   25,W
00F1:  MOVWF  2B
00F2:  CALL   038
....................      #endif 
....................    } 
00F3:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define SW1 PIN_C3 
.................... #define SW2 PIN_C4 
.................... void main(void) 
*
014A:  MOVF   03,W
014B:  ANDLW  1F
014C:  MOVWF  03
014D:  MOVLW  FF
014E:  MOVWF  20
014F:  BSF    03.5
0150:  BSF    1F.0
0151:  BSF    1F.1
0152:  BSF    1F.2
0153:  BCF    1F.3
0154:  MOVLW  07
0155:  MOVWF  1C
0156:  BCF    03.7
0157:  BCF    03.5
0158:  CLRF   21
.................... { int8 SW=0; 
.................... while (TRUE) 
.................... {lcd_init(); 
0159:  GOTO   078
.................... if(!input(SW1)) SW=1; 
015A:  BSF    20.3
015B:  MOVF   20,W
015C:  BSF    03.5
015D:  MOVWF  07
015E:  BCF    03.5
015F:  BTFSC  07.3
0160:  GOTO   163
0161:  MOVLW  01
0162:  MOVWF  21
.................... if(!input(SW2)) SW=2; 
0163:  BSF    20.4
0164:  MOVF   20,W
0165:  BSF    03.5
0166:  MOVWF  07
0167:  BCF    03.5
0168:  BTFSC  07.4
0169:  GOTO   16C
016A:  MOVLW  02
016B:  MOVWF  21
.................... switch(SW) 
016C:  MOVF   21,W
016D:  XORLW  01
016E:  BTFSC  03.2
016F:  GOTO   174
0170:  XORLW  03
0171:  BTFSC  03.2
0172:  GOTO   188
0173:  GOTO   19C
.................... {case 1: { 
.................... lcd_gotoxy(1,1); 
0174:  MOVLW  01
0175:  MOVWF  26
0176:  MOVWF  27
0177:  CALL   0B6
.................... printf(lcd_putc,"Xin chao cac ban!"); 
0178:  MOVLW  04
0179:  BSF    03.6
017A:  MOVWF  0D
017B:  MOVLW  00
017C:  MOVWF  0F
017D:  BCF    03.6
017E:  CALL   0F4
.................... delay_ms(300); 
017F:  MOVLW  02
0180:  MOVWF  22
0181:  MOVLW  96
0182:  MOVWF  27
0183:  CALL   011
0184:  DECFSZ 22,F
0185:  GOTO   181
.................... SW=0;break;} 
0186:  CLRF   21
0187:  GOTO   19C
.................... case 2:{ 
.................... lcd_gotoxy(10,2); 
0188:  MOVLW  0A
0189:  MOVWF  26
018A:  MOVLW  02
018B:  MOVWF  27
018C:  CALL   0B6
.................... printf(lcd_putc,"HUTECH"); 
018D:  MOVLW  0D
018E:  BSF    03.6
018F:  MOVWF  0D
0190:  MOVLW  00
0191:  MOVWF  0F
0192:  BCF    03.6
0193:  CALL   0F4
.................... delay_ms(300); 
0194:  MOVLW  02
0195:  MOVWF  22
0196:  MOVLW  96
0197:  MOVWF  27
0198:  CALL   011
0199:  DECFSZ 22,F
019A:  GOTO   196
.................... SW=0;break;}} 
019B:  CLRF   21
019C:  GOTO   159
.................... } 
.................... } 
....................  
019D:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

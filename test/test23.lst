CCS PCM C Compiler, Version 5.015, 5967               28-Jul-20 09:18

               Filename:   E:\VDK-TrongTan\test\test23.lst

               ROM used:   513 words (6%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           21 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18E
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA D3,32
0005:  DATA 74,10
0006:  DATA F6,30
0007:  DATA EC,3A
0008:  DATA 65,00
*
00EC:  MOVF   0B,W
00ED:  MOVWF  23
00EE:  BCF    0B.7
00EF:  BSF    03.5
00F0:  BSF    03.6
00F1:  BSF    0C.7
00F2:  BSF    0C.0
00F3:  NOP
00F4:  NOP
00F5:  BCF    03.5
00F6:  BCF    03.6
00F7:  BTFSC  23.7
00F8:  BSF    0B.7
00F9:  BSF    03.6
00FA:  MOVF   0C,W
00FB:  ANDLW  7F
00FC:  BTFSC  03.2
00FD:  GOTO   140
00FE:  BCF    03.6
00FF:  MOVWF  23
0100:  BSF    03.6
0101:  MOVF   0D,W
0102:  BCF    03.6
0103:  MOVWF  24
0104:  BSF    03.6
0105:  MOVF   0F,W
0106:  BCF    03.6
0107:  MOVWF  25
0108:  MOVF   23,W
0109:  MOVWF  26
010A:  CALL   0C0
010B:  MOVF   24,W
010C:  BSF    03.6
010D:  MOVWF  0D
010E:  BCF    03.6
010F:  MOVF   25,W
0110:  BSF    03.6
0111:  MOVWF  0F
0112:  BCF    03.6
0113:  MOVF   0B,W
0114:  MOVWF  26
0115:  BCF    0B.7
0116:  BSF    03.5
0117:  BSF    03.6
0118:  BSF    0C.7
0119:  BSF    0C.0
011A:  NOP
011B:  NOP
011C:  BCF    03.5
011D:  BCF    03.6
011E:  BTFSC  26.7
011F:  BSF    0B.7
0120:  BSF    03.6
0121:  RLF    0C,W
0122:  RLF    0E,W
0123:  ANDLW  7F
0124:  BTFSC  03.2
0125:  GOTO   140
0126:  BCF    03.6
0127:  MOVWF  23
0128:  BSF    03.6
0129:  MOVF   0D,W
012A:  BCF    03.6
012B:  MOVWF  24
012C:  BSF    03.6
012D:  MOVF   0F,W
012E:  BCF    03.6
012F:  MOVWF  25
0130:  MOVF   23,W
0131:  MOVWF  26
0132:  CALL   0C0
0133:  MOVF   24,W
0134:  BSF    03.6
0135:  MOVWF  0D
0136:  BCF    03.6
0137:  MOVF   25,W
0138:  BSF    03.6
0139:  MOVWF  0F
013A:  INCF   0D,F
013B:  BTFSC  03.2
013C:  INCF   0F,F
013D:  BCF    03.6
013E:  GOTO   0EC
013F:  BSF    03.6
0140:  BCF    03.6
0141:  BCF    0A.3
0142:  BCF    0A.4
0143:  GOTO   1AB (RETURN)
0144:  MOVF   26,W
0145:  CLRF   78
0146:  SUBWF  25,W
0147:  BTFSC  03.0
0148:  GOTO   14C
0149:  MOVF   25,W
014A:  MOVWF  77
014B:  GOTO   158
014C:  CLRF   77
014D:  MOVLW  08
014E:  MOVWF  27
014F:  RLF    25,F
0150:  RLF    77,F
0151:  MOVF   26,W
0152:  SUBWF  77,W
0153:  BTFSC  03.0
0154:  MOVWF  77
0155:  RLF    78,F
0156:  DECFSZ 27,F
0157:  GOTO   14F
0158:  RETURN
0159:  MOVF   78,W
015A:  MOVF   23,W
015B:  MOVWF  25
015C:  MOVLW  64
015D:  MOVWF  26
015E:  CALL   144
015F:  MOVF   77,W
0160:  MOVWF  23
0161:  MOVF   78,W
0162:  MOVLW  30
0163:  BTFSS  03.2
0164:  GOTO   16C
0165:  BTFSS  24.1
0166:  GOTO   173
0167:  BTFSC  24.3
0168:  GOTO   173
0169:  BTFSC  24.4
016A:  MOVLW  20
016B:  GOTO   16F
016C:  BCF    24.3
016D:  BCF    24.4
016E:  BSF    24.0
016F:  ADDWF  78,F
0170:  MOVF   78,W
0171:  MOVWF  26
0172:  CALL   0C0
0173:  MOVF   23,W
0174:  MOVWF  25
0175:  MOVLW  0A
0176:  MOVWF  26
0177:  CALL   144
0178:  MOVF   77,W
0179:  MOVWF  23
017A:  MOVF   78,W
017B:  MOVLW  30
017C:  BTFSS  03.2
017D:  GOTO   184
017E:  BTFSC  24.3
017F:  GOTO   188
0180:  BTFSS  24.0
0181:  GOTO   188
0182:  BTFSC  24.4
0183:  MOVLW  20
0184:  ADDWF  78,F
0185:  MOVF   78,W
0186:  MOVWF  26
0187:  CALL   0C0
0188:  MOVLW  30
0189:  ADDWF  23,F
018A:  MOVF   23,W
018B:  MOVWF  26
018C:  CALL   0C0
018D:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP 
.................... #use delay(clock=8M) 
*
0009:  MOVLW  28
000A:  MOVWF  04
000B:  BCF    03.7
000C:  MOVF   00,W
000D:  BTFSC  03.2
000E:  GOTO   01C
000F:  MOVLW  02
0010:  MOVWF  78
0011:  CLRF   77
0012:  DECFSZ 77,F
0013:  GOTO   012
0014:  DECFSZ 78,F
0015:  GOTO   011
0016:  MOVLW  97
0017:  MOVWF  77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 00,F
001B:  GOTO   00F
001C:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0036:  MOVLW  0F
0037:  BSF    03.5
0038:  ANDWF  08,W
0039:  IORLW  F0
003A:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003B:  BCF    03.5
003C:  BSF    08.2
....................    delay_cycles(1); 
003D:  NOP
....................    lcd_output_enable(1); 
003E:  BSF    08.0
....................    delay_cycles(1); 
003F:  NOP
....................    high = lcd_read_nibble(); 
0040:  CALL   02A
0041:  MOVF   78,W
0042:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
0043:  BCF    08.0
....................    delay_cycles(1); 
0044:  NOP
....................    lcd_output_enable(1); 
0045:  BSF    08.0
....................    delay_us(1); 
0046:  GOTO   047
....................    low = lcd_read_nibble(); 
0047:  CALL   02A
0048:  MOVF   78,W
0049:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
004A:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004B:  MOVLW  0F
004C:  BSF    03.5
004D:  ANDWF  08,W
004E:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
004F:  BCF    03.5
0050:  SWAPF  2E,W
0051:  MOVWF  77
0052:  MOVLW  F0
0053:  ANDWF  77,F
0054:  MOVF   77,W
0055:  IORWF  2D,W
0056:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002A:  MOVF   08,W
002B:  MOVWF  77
002C:  SWAPF  08,W
002D:  ANDLW  0F
002E:  MOVWF  78
....................   #endif 
002F:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
001D:  SWAPF  2E,W
001E:  ANDLW  F0
001F:  MOVWF  77
0020:  MOVLW  0F
0021:  ANDWF  08,W
0022:  IORWF  77,W
0023:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0024:  NOP
....................    lcd_output_enable(1); 
0025:  BSF    08.0
....................    delay_us(2); 
0026:  GOTO   027
0027:  GOTO   028
....................    lcd_output_enable(0); 
0028:  BCF    08.0
0029:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0030:  BSF    03.5
0031:  BCF    08.0
....................    lcd_rs_tris(); 
0032:  BCF    08.1
....................    lcd_rw_tris(); 
0033:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0034:  BCF    03.5
0035:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0057:  MOVF   78,W
0058:  MOVWF  2D
0059:  BTFSC  2D.7
005A:  GOTO   036
....................    lcd_output_rs(address); 
005B:  BTFSS  2B.0
005C:  BCF    08.1
005D:  BTFSC  2B.0
005E:  BSF    08.1
....................    delay_cycles(1); 
005F:  NOP
....................    lcd_output_rw(0); 
0060:  BCF    08.2
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(0); 
0062:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0063:  SWAPF  2C,W
0064:  MOVWF  2D
0065:  MOVLW  0F
0066:  ANDWF  2D,F
0067:  MOVF   2D,W
0068:  MOVWF  2E
0069:  CALL   01D
....................    lcd_send_nibble(n & 0xf); 
006A:  MOVF   2C,W
006B:  ANDLW  0F
006C:  MOVWF  2D
006D:  MOVWF  2E
006E:  CALL   01D
006F:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0070:  MOVLW  28
0071:  MOVWF  24
0072:  MOVLW  0C
0073:  MOVWF  25
0074:  MOVLW  01
0075:  MOVWF  26
0076:  MOVLW  06
0077:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0078:  BCF    08.0
....................    lcd_output_rs(0); 
0079:  BCF    08.1
....................    lcd_output_rw(0); 
007A:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007B:  MOVLW  0F
007C:  BSF    03.5
007D:  ANDWF  08,W
007E:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
007F:  BCF    08.0
....................    lcd_rs_tris(); 
0080:  BCF    08.1
....................    lcd_rw_tris(); 
0081:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0082:  MOVLW  0F
0083:  BCF    03.5
0084:  MOVWF  28
0085:  CALL   009
....................    for(i=1;i<=3;++i) 
0086:  MOVLW  01
0087:  MOVWF  23
0088:  MOVF   23,W
0089:  SUBLW  03
008A:  BTFSS  03.0
008B:  GOTO   094
....................    { 
....................        lcd_send_nibble(3); 
008C:  MOVLW  03
008D:  MOVWF  2E
008E:  CALL   01D
....................        delay_ms(5); 
008F:  MOVLW  05
0090:  MOVWF  28
0091:  CALL   009
0092:  INCF   23,F
0093:  GOTO   088
....................    } 
....................     
....................    lcd_send_nibble(2); 
0094:  MOVLW  02
0095:  MOVWF  2E
0096:  CALL   01D
....................    delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  28
0099:  CALL   009
....................    for(i=0;i<=3;++i) 
009A:  CLRF   23
009B:  MOVF   23,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0AB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
009F:  MOVLW  24
00A0:  ADDWF  23,W
00A1:  MOVWF  04
00A2:  BCF    03.7
00A3:  MOVF   00,W
00A4:  MOVWF  28
00A5:  CLRF   2B
00A6:  MOVF   28,W
00A7:  MOVWF  2C
00A8:  CALL   030
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A9:  INCF   23,F
00AA:  GOTO   09B
00AB:  BCF    0A.3
00AC:  BCF    0A.4
00AD:  GOTO   19F (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00AE:  DECFSZ 28,W
00AF:  GOTO   0B1
00B0:  GOTO   0B4
....................       address=LCD_LINE_TWO; 
00B1:  MOVLW  40
00B2:  MOVWF  29
00B3:  GOTO   0B5
....................    else 
....................       address=0; 
00B4:  CLRF   29
....................       
....................    address+=x-1; 
00B5:  MOVLW  01
00B6:  SUBWF  27,W
00B7:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00B8:  MOVF   29,W
00B9:  IORLW  80
00BA:  MOVWF  2A
00BB:  CLRF   2B
00BC:  MOVF   2A,W
00BD:  MOVWF  2C
00BE:  CALL   030
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BF:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C0:  MOVF   26,W
00C1:  XORLW  07
00C2:  BTFSC  03.2
00C3:  GOTO   0CE
00C4:  XORLW  0B
00C5:  BTFSC  03.2
00C6:  GOTO   0D3
00C7:  XORLW  06
00C8:  BTFSC  03.2
00C9:  GOTO   0DB
00CA:  XORLW  02
00CB:  BTFSC  03.2
00CC:  GOTO   0E1
00CD:  GOTO   0E6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00CE:  MOVLW  01
00CF:  MOVWF  27
00D0:  MOVWF  28
00D1:  CALL   0AE
00D2:  GOTO   0EB
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D3:  CLRF   2B
00D4:  MOVLW  01
00D5:  MOVWF  2C
00D6:  CALL   030
....................                      delay_ms(2); 
00D7:  MOVLW  02
00D8:  MOVWF  28
00D9:  CALL   009
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DA:  GOTO   0EB
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DB:  MOVLW  01
00DC:  MOVWF  27
00DD:  MOVLW  02
00DE:  MOVWF  28
00DF:  CALL   0AE
00E0:  GOTO   0EB
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E1:  CLRF   2B
00E2:  MOVLW  10
00E3:  MOVWF  2C
00E4:  CALL   030
00E5:  GOTO   0EB
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E6:  MOVLW  01
00E7:  MOVWF  2B
00E8:  MOVF   26,W
00E9:  MOVWF  2C
00EA:  CALL   030
....................      #endif 
....................    } 
00EB:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define SW1 PIN_C3 
.................... #define SW2 PIN_C4 
.................... void main(void) 
*
018E:  MOVF   03,W
018F:  ANDLW  1F
0190:  MOVWF  03
0191:  MOVLW  FF
0192:  MOVWF  20
0193:  BSF    03.5
0194:  BSF    1F.0
0195:  BSF    1F.1
0196:  BSF    1F.2
0197:  BCF    1F.3
0198:  MOVLW  07
0199:  MOVWF  1C
019A:  BCF    03.7
019B:  BCF    03.5
019C:  CLRF   21
019D:  CLRF   22
.................... { int8 SW=0,set_val=0; 
.................... lcd_init(); 
019E:  GOTO   070
.................... lcd_gotoxy(5,1); 
019F:  MOVLW  05
01A0:  MOVWF  27
01A1:  MOVLW  01
01A2:  MOVWF  28
01A3:  CALL   0AE
.................... printf(lcd_putc,"Set value"); 
01A4:  MOVLW  04
01A5:  BSF    03.6
01A6:  MOVWF  0D
01A7:  MOVLW  00
01A8:  MOVWF  0F
01A9:  BCF    03.6
01AA:  GOTO   0EC
.................... lcd_gotoxy(8,2); 
01AB:  MOVLW  08
01AC:  MOVWF  27
01AD:  MOVLW  02
01AE:  MOVWF  28
01AF:  CALL   0AE
.................... printf(lcd_putc,"%03u",set_val); 
01B0:  MOVF   22,W
01B1:  MOVWF  23
01B2:  MOVLW  03
01B3:  MOVWF  24
01B4:  CALL   159
.................... while (TRUE) 
.................... { 
.................... if(!input(SW1)) SW=1;  
01B5:  BSF    20.3
01B6:  MOVF   20,W
01B7:  BSF    03.5
01B8:  MOVWF  07
01B9:  BCF    03.5
01BA:  BTFSC  07.3
01BB:  GOTO   1BE
01BC:  MOVLW  01
01BD:  MOVWF  21
.................... if(!input(SW2)) SW=2; 
01BE:  BSF    20.4
01BF:  MOVF   20,W
01C0:  BSF    03.5
01C1:  MOVWF  07
01C2:  BCF    03.5
01C3:  BTFSC  07.4
01C4:  GOTO   1C7
01C5:  MOVLW  02
01C6:  MOVWF  21
.................... switch(SW) 
01C7:  MOVF   21,W
01C8:  XORLW  01
01C9:  BTFSC  03.2
01CA:  GOTO   1CF
01CB:  XORLW  03
01CC:  BTFSC  03.2
01CD:  GOTO   1E8
01CE:  GOTO   1FF
.................... {case 1: { if(set_val<200){ 
01CF:  MOVF   22,W
01D0:  SUBLW  C7
01D1:  BTFSS  03.0
01D2:  GOTO   1E8
.................... set_val=set_val+5; 
01D3:  MOVLW  05
01D4:  ADDWF  22,F
.................... lcd_gotoxy(8,2); 
01D5:  MOVLW  08
01D6:  MOVWF  27
01D7:  MOVLW  02
01D8:  MOVWF  28
01D9:  CALL   0AE
.................... printf(lcd_putc,"%03u",set_val); 
01DA:  MOVF   22,W
01DB:  MOVWF  23
01DC:  MOVLW  03
01DD:  MOVWF  24
01DE:  CALL   159
.................... delay_ms(300); 
01DF:  MOVLW  02
01E0:  MOVWF  23
01E1:  MOVLW  96
01E2:  MOVWF  28
01E3:  CALL   009
01E4:  DECFSZ 23,F
01E5:  GOTO   1E1
.................... SW=0;break;}} 
01E6:  CLRF   21
01E7:  GOTO   1FF
.................... case 2:{ if(set_val>0){ 
01E8:  MOVF   22,F
01E9:  BTFSC  03.2
01EA:  GOTO   1FF
.................... set_val=set_val-1; 
01EB:  MOVLW  01
01EC:  SUBWF  22,F
.................... lcd_gotoxy(8,2); 
01ED:  MOVLW  08
01EE:  MOVWF  27
01EF:  MOVLW  02
01F0:  MOVWF  28
01F1:  CALL   0AE
.................... printf(lcd_putc,"%03u",set_val); 
01F2:  MOVF   22,W
01F3:  MOVWF  23
01F4:  MOVLW  03
01F5:  MOVWF  24
01F6:  CALL   159
.................... delay_ms(300); 
01F7:  MOVLW  02
01F8:  MOVWF  23
01F9:  MOVLW  96
01FA:  MOVWF  28
01FB:  CALL   009
01FC:  DECFSZ 23,F
01FD:  GOTO   1F9
.................... SW=0;break;}} 
01FE:  CLRF   21
.................... } 
01FF:  GOTO   1B5
.................... } 
.................... } 
....................  
0200:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
